architectures:
  - x86_64
categories:
  - imperial
  - synthetic
dependencies:
  cmath: {} # For rounding mode functions
language: c99
name: rounding_sqrt
schema_version: 0
sources:
  - rounding_sqrt.c
variants:
  klee:
    categories:
      - ase_2017
    defines:
      BUG: "0"
      KLEE: null
    dependencies:
      klee_runtime: {}
    verification_tasks:
      no_assert_fail:
        correct: true
  klee_bug:
    categories:
      - ase_2017
    defines:
      BUG: "1"
      KLEE: null
    dependencies:
      klee_runtime: {}
    verification_tasks:
      no_assert_fail:
        correct: false
        counter_examples:
          - &incorrect_ru_rne_assert
            description: >
              The assertion incorrectly asserts that rounding to nearest
              will always round up.
            locations:
              -
                file: rounding_sqrt.c
                line: 134
          - &incorrect_ru_rd_assert
            description: >
              The assertion that rounded up values are always greater than
              rounded down values is missing a guard. The values can be the
              same if rounding a perfect square or if the values are so small
              that the computed sqrt() is zero.
            locations:
              -
                file: rounding_sqrt.c
                line: 128
  non_klee:
    categories:
      - ase_2017
    description: >
      Native version that does not depend on KLEE. Here we
      are testing that the concrete interpretation is correct.
    defines:
      BUG: "0"
    verification_tasks:
      no_assert_fail:
        correct: true
  non_klee_bug:
    defines:
      BUG: "1"
    verification_tasks:
      no_assert_fail:
        correct: false
        counter_examples:
          - *incorrect_ru_rne_assert
description: >
  This example counts the number of single-precision floating-point
  numbers between two bounding single-precision floating-point
  numbers.  The bounding numbers are required to be sufficiently
  close that we know an upper bound on the count.  The benchmark
  checks that the count does not exceed this bound.
